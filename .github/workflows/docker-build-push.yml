name: Build and Push Docker Images

on:
  push:
    branches: [ main, master ]
    paths:
      - 'go/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'go/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Specific environment to build (leave empty for all)'
        required: false
        default: ''

env:
  REGISTRY: docker.io
  NAMESPACE: cyberpoc

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.get-envs.outputs.environments }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for accurate diff

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: go/**

      - name: Get changed environments
        id: get-envs
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            # If a specific environment is specified via workflow_dispatch, build only that one
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
            echo "Building specified environment: ${{ github.event.inputs.environment }}"
          else
            # Get directories of changed files
            changed_dirs=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep '^go/' | xargs -n 1 dirname | sed 's|^go/||' | sort -u | uniq)
            
            valid_envs=()
            for dir in $changed_dirs; do
                # Make sure dir is not empty
                if [[ -n "${dir// }" ]]; then
                  # Check if it's a directory containing a Dockerfile
                  if [ -f "go/$dir/Dockerfile" ]; then
                      valid_envs+=("\"$dir\"")
                  fi
                fi
            done
            
            if [ ${#valid_envs[@]} -eq 0 ]; then
              echo "No changed environments with Dockerfiles found. Nothing to build."
              echo "environments=[]" >> $GITHUB_OUTPUT
            else
              environments=$(IFS=,; echo "[${valid_envs[*]}]")
              echo "environments=$environments" >> $GITHUB_OUTPUT
              echo "Building changed environments: $environments"
            fi
          fi

  build-and-push:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ fromJson(needs.prepare.outputs.environments) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if Dockerfile exists
        id: check-dockerfile
        run: |
          if [ -f "go/${{ matrix.environment }}/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Dockerfile not found for ${{ matrix.environment }}"
          fi

      - name: Extract metadata
        if: steps.check-dockerfile.outputs.exists == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.environment }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v0.0.1,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.check-dockerfile.outputs.exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: go/${{ matrix.environment }}
          file: go/${{ matrix.environment }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate image summary
        if: steps.check-dockerfile.outputs.exists == 'true'
        run: |
          echo "## 🐳 Docker Image Built" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  deploy-summary:
    needs: [prepare, build-and-push]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "# 🚀 Vulnerable Code Environments Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🐳 Available Images" >> $GITHUB_STEP_SUMMARY
          echo "All images are available at: \`docker.io/cyberpoc/<environment>:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Usage Examples" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run a specific environment" >> $GITHUB_STEP_SUMMARY
          echo "docker pull cyberpoc/exec:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:80 -e flag=\"CTF{test_flag}\" cyberpoc/exec:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Build locally using Makefile" >> $GITHUB_STEP_SUMMARY
          echo "cd go" >> $GITHUB_STEP_SUMMARY
          echo "make build ENV=exec" >> $GITHUB_STEP_SUMMARY
          echo "make run ENV=exec PORT=8080" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚠️ Security Notice" >> $GITHUB_STEP_SUMMARY
          echo "These images contain **intentional security vulnerabilities** for educational purposes." >> $GITHUB_STEP_SUMMARY
          echo "**DO NOT** use in production environments." >> $GITHUB_STEP_SUMMARY
